// Generated by Apple Swift version 5.0.1 (swiftlang-1001.0.82.4 clang-1001.0.46.5)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wgcc-compat"

#if !defined(__has_include)
# define __has_include(x) 0
#endif
#if !defined(__has_attribute)
# define __has_attribute(x) 0
#endif
#if !defined(__has_feature)
# define __has_feature(x) 0
#endif
#if !defined(__has_warning)
# define __has_warning(x) 0
#endif

#if __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wauto-import"
#include <Foundation/Foundation.h>
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>

#if !defined(SWIFT_TYPEDEFS)
# define SWIFT_TYPEDEFS 1
# if __has_include(<uchar.h>)
#  include <uchar.h>
# elif !defined(__cplusplus)
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
# endif
typedef float swift_float2  __attribute__((__ext_vector_type__(2)));
typedef float swift_float3  __attribute__((__ext_vector_type__(3)));
typedef float swift_float4  __attribute__((__ext_vector_type__(4)));
typedef double swift_double2  __attribute__((__ext_vector_type__(2)));
typedef double swift_double3  __attribute__((__ext_vector_type__(3)));
typedef double swift_double4  __attribute__((__ext_vector_type__(4)));
typedef int swift_int2  __attribute__((__ext_vector_type__(2)));
typedef int swift_int3  __attribute__((__ext_vector_type__(3)));
typedef int swift_int4  __attribute__((__ext_vector_type__(4)));
typedef unsigned int swift_uint2  __attribute__((__ext_vector_type__(2)));
typedef unsigned int swift_uint3  __attribute__((__ext_vector_type__(3)));
typedef unsigned int swift_uint4  __attribute__((__ext_vector_type__(4)));
#endif

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif
#if !defined(SWIFT_CLASS_PROPERTY)
# if __has_feature(objc_class_property)
#  define SWIFT_CLASS_PROPERTY(...) __VA_ARGS__
# else
#  define SWIFT_CLASS_PROPERTY(...)
# endif
#endif

#if __has_attribute(objc_runtime_name)
# define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
#else
# define SWIFT_RUNTIME_NAME(X)
#endif
#if __has_attribute(swift_name)
# define SWIFT_COMPILE_NAME(X) __attribute__((swift_name(X)))
#else
# define SWIFT_COMPILE_NAME(X)
#endif
#if __has_attribute(objc_method_family)
# define SWIFT_METHOD_FAMILY(X) __attribute__((objc_method_family(X)))
#else
# define SWIFT_METHOD_FAMILY(X)
#endif
#if __has_attribute(noescape)
# define SWIFT_NOESCAPE __attribute__((noescape))
#else
# define SWIFT_NOESCAPE
#endif
#if __has_attribute(warn_unused_result)
# define SWIFT_WARN_UNUSED_RESULT __attribute__((warn_unused_result))
#else
# define SWIFT_WARN_UNUSED_RESULT
#endif
#if __has_attribute(noreturn)
# define SWIFT_NORETURN __attribute__((noreturn))
#else
# define SWIFT_NORETURN
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA
#endif
#if !defined(SWIFT_CLASS)
# if __has_attribute(objc_subclassing_restricted)
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif

#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
# define SWIFT_PROTOCOL_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif

#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif

#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER
# endif
#endif
#if !defined(SWIFT_ENUM_ATTR)
# if defined(__has_attribute) && __has_attribute(enum_extensibility)
#  define SWIFT_ENUM_ATTR(_extensibility) __attribute__((enum_extensibility(_extensibility)))
# else
#  define SWIFT_ENUM_ATTR(_extensibility)
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name, _extensibility) enum _name : _type _name; enum SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# if __has_feature(generalized_swift_name)
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) enum _name : _type _name SWIFT_COMPILE_NAME(SWIFT_NAME); enum SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# else
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) SWIFT_ENUM(_type, _name, _extensibility)
# endif
#endif
#if !defined(SWIFT_UNAVAILABLE)
# define SWIFT_UNAVAILABLE __attribute__((unavailable))
#endif
#if !defined(SWIFT_UNAVAILABLE_MSG)
# define SWIFT_UNAVAILABLE_MSG(msg) __attribute__((unavailable(msg)))
#endif
#if !defined(SWIFT_AVAILABILITY)
# define SWIFT_AVAILABILITY(plat, ...) __attribute__((availability(plat, __VA_ARGS__)))
#endif
#if !defined(SWIFT_DEPRECATED)
# define SWIFT_DEPRECATED __attribute__((deprecated))
#endif
#if !defined(SWIFT_DEPRECATED_MSG)
# define SWIFT_DEPRECATED_MSG(...) __attribute__((deprecated(__VA_ARGS__)))
#endif
#if __has_feature(attribute_diagnose_if_objc)
# define SWIFT_DEPRECATED_OBJC(Msg) __attribute__((diagnose_if(1, Msg, "warning")))
#else
# define SWIFT_DEPRECATED_OBJC(Msg) SWIFT_DEPRECATED_MSG(Msg)
#endif
#if __has_feature(modules)
#if __has_warning("-Watimport-in-framework-header")
#pragma clang diagnostic ignored "-Watimport-in-framework-header"
#endif
@import CocoaAsyncSocket;
@import Foundation;
@import ObjectiveC;
@import RealmSwift;
@import Security;
#endif

#import <Sweepr/Sweepr.h>

#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"
#if __has_warning("-Wpragma-clang-attribute")
# pragma clang diagnostic ignored "-Wpragma-clang-attribute"
#endif
#pragma clang diagnostic ignored "-Wunknown-pragmas"
#pragma clang diagnostic ignored "-Wnullability"

#if __has_attribute(external_source_symbol)
# pragma push_macro("any")
# undef any
# pragma clang attribute push(__attribute__((external_source_symbol(language="Swift", defined_in="Sweepr",generated_declaration))), apply_to=any(function,enum,objc_interface,objc_category,objc_protocol))
# pragma pop_macro("any")
#endif

@class RLMRealm;
@class RLMObjectSchema;
@class RLMSchema;

SWIFT_CLASS("_TtC6Sweepr9AdminUser")
@interface AdminUser : RealmSwiftObject
@property (nonatomic, copy) NSString * _Nullable avatar;
@property (nonatomic, copy) NSString * _Nullable email;
@property (nonatomic, copy) NSString * _Nullable firstName;
@property (nonatomic, copy) NSString * _Nullable lastName;
@property (nonatomic, copy) NSString * _Nullable phone;
@property (nonatomic, copy) NSString * _Nullable role;
@property (nonatomic, copy) NSString * _Nullable username;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithRealm:(RLMRealm * _Nonnull)realm schema:(RLMObjectSchema * _Nonnull)schema OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithValue:(id _Nonnull)value schema:(RLMSchema * _Nonnull)schema OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC6Sweepr4Auth")
@interface Auth : NSObject
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
- (NSString * _Nullable)serialise SWIFT_WARN_UNUSED_RESULT;
@end


SWIFT_CLASS("_TtC6Sweepr10ButtonText")
@interface ButtonText : NSObject
@property (nonatomic, copy) NSString * _Nonnull primaryButton;
@property (nonatomic, copy) NSString * _Nonnull secondaryButton;
@property (nonatomic) BOOL continueOnSecondaryButton;
- (NSDictionary<NSString *, id> * _Nonnull)toDictionary SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init:(NSString * _Nonnull)primaryButton :(NSString * _Nonnull)secondaryButton OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init:(NSString * _Nonnull)primaryButton :(NSString * _Nonnull)secondaryButton :(BOOL)_continue OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@class NSCoder;

SWIFT_CLASS("_TtC6Sweepr4Card")
@interface Card : NSObject <NSCoding>
/// NSCoding required initializer.
/// Fills the data from the passed decoder
- (nonnull instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
/// NSCoding required method.
/// Encodes mode properties into the decoder
- (void)encodeWithCoder:(NSCoder * _Nonnull)aCoder;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS("_TtC6Sweepr13CardContainer")
@interface CardContainer : Card
/// Returns all the available property values in the form of [String:Any] object where the key is the approperiate json key and the value is the value of the corresponding property
- (NSDictionary<NSString *, id> * _Nonnull)toDictionary SWIFT_WARN_UNUSED_RESULT;
/// NSCoding required initializer.
/// Fills the data from the passed decoder
- (nonnull instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
/// NSCoding required method.
/// Encodes mode properties into the decoder
- (void)encodeWithCoder:(NSCoder * _Nonnull)aCoder;
- (NSString * _Nullable)serialise SWIFT_WARN_UNUSED_RESULT;
@end


/// Main CocoaMQTT Class
/// Notice: GCDAsyncSocket need delegate to extend NSObject
SWIFT_CLASS("_TtC6Sweepr9CocoaMQTT")
@interface CocoaMQTT : NSObject
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@class GCDAsyncSocket;

@interface CocoaMQTT (SWIFT_EXTENSION(Sweepr)) <GCDAsyncSocketDelegate>
- (void)socket:(GCDAsyncSocket * _Nonnull)sock didConnectToHost:(NSString * _Nonnull)host port:(uint16_t)port;
- (void)socket:(GCDAsyncSocket * _Nonnull)sock didReceiveTrust:(SecTrustRef _Nonnull)trust completionHandler:(void (^ _Nonnull)(BOOL))completionHandler;
- (void)socketDidSecure:(GCDAsyncSocket * _Nonnull)sock;
- (void)socket:(GCDAsyncSocket * _Nonnull)sock didWriteDataWithTag:(NSInteger)tag;
- (void)socket:(GCDAsyncSocket * _Nonnull)sock didReadData:(NSData * _Nonnull)data withTag:(NSInteger)tag;
- (void)socketDidDisconnect:(GCDAsyncSocket * _Nonnull)sock withError:(NSError * _Nullable)err;
@end



/// Conn Ack
typedef SWIFT_ENUM(uint8_t, CocoaMQTTConnAck, closed) {
  CocoaMQTTConnAckAccept = 0,
  CocoaMQTTConnAckUnacceptableProtocolVersion = 1,
  CocoaMQTTConnAckIdentifierRejected = 2,
  CocoaMQTTConnAckServerUnavailable = 3,
  CocoaMQTTConnAckBadUsernameOrPassword = 4,
  CocoaMQTTConnAckNotAuthorized = 5,
  CocoaMQTTConnAckReserved = 6,
};

/// Connection State
typedef SWIFT_ENUM(uint8_t, CocoaMQTTConnState, closed) {
  CocoaMQTTConnStateInitial = 0,
  CocoaMQTTConnStateConnecting = 1,
  CocoaMQTTConnStateConnected = 2,
  CocoaMQTTConnStateDisconnected = 3,
};

@class CocoaMQTTMessage;

/// MQTT Delegate
SWIFT_PROTOCOL("_TtP6Sweepr17CocoaMQTTDelegate_")
@protocol CocoaMQTTDelegate <NSObject>
- (void)mqtt:(CocoaMQTT * _Nonnull)mqtt didConnectAck:(enum CocoaMQTTConnAck)ack;
- (void)mqtt:(CocoaMQTT * _Nonnull)mqtt didPublishMessage:(CocoaMQTTMessage * _Nonnull)message id:(uint16_t)id;
- (void)mqtt:(CocoaMQTT * _Nonnull)mqtt didPublishAck:(uint16_t)id;
- (void)mqtt:(CocoaMQTT * _Nonnull)mqtt didReceiveMessage:(CocoaMQTTMessage * _Nonnull)message id:(uint16_t)id;
- (void)mqtt:(CocoaMQTT * _Nonnull)mqtt didSubscribeTopic:(NSString * _Nonnull)topic;
- (void)mqtt:(CocoaMQTT * _Nonnull)mqtt didUnsubscribeTopic:(NSString * _Nonnull)topic;
- (void)mqttDidPing:(CocoaMQTT * _Nonnull)mqtt;
- (void)mqttDidReceivePong:(CocoaMQTT * _Nonnull)mqtt;
- (void)mqttDidDisconnect:(CocoaMQTT * _Nonnull)mqtt withError:(NSError * _Nullable)err;
@optional
- (void)mqtt:(CocoaMQTT * _Nonnull)mqtt didReceive:(SecTrustRef _Nonnull)trust completionHandler:(void (^ _Nonnull)(BOOL))completionHandler;
- (void)mqtt:(CocoaMQTT * _Nonnull)mqtt didPublishComplete:(uint16_t)id;
- (void)mqtt:(CocoaMQTT * _Nonnull)mqtt didStateChangeTo:(enum CocoaMQTTConnState)state;
@end


SWIFT_CLASS("_TtC6Sweepr20CocoaMQTTFrameBuffer")
@interface CocoaMQTTFrameBuffer : NSObject
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC6Sweepr15CocoaMQTTLogger")
@interface CocoaMQTTLogger : NSObject
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// MQTT Message
SWIFT_CLASS("_TtC6Sweepr16CocoaMQTTMessage")
@interface CocoaMQTTMessage : NSObject
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

/// QOS
typedef SWIFT_ENUM(uint8_t, CocoaMQTTQOS, closed) {
  CocoaMQTTQOSQos0 = 0,
  CocoaMQTTQOSQos1 = 1,
  CocoaMQTTQOSQos2 = 2,
};


/// MQTT Will Message
SWIFT_CLASS("_TtC6Sweepr13CocoaMQTTWill")
@interface CocoaMQTTWill : CocoaMQTTMessage
@end

@class NSNumber;
enum DiscoveryType : NSInteger;

/// The device found on the scan or the network
SWIFT_CLASS("_TtC6Sweepr6Device")
@interface Device : RealmSwiftObject
/// The ip address of this device
@property (nonatomic, copy) NSString * _Nonnull ipAddress;
@property (nonatomic) NSInteger port;
/// the macaddress of this device
@property (nonatomic, copy) NSString * _Nonnull macAddress;
@property (nonatomic, copy) NSString * _Nonnull subnetMask;
/// The manufacturer of this device
@property (nonatomic, copy) NSString * _Nonnull manufacturer;
@property (nonatomic, copy) NSDate * _Nullable scanDate;
@property (nonatomic) BOOL hasPinged;
@property (nonatomic, copy) NSString * _Nonnull scanID;
@property (nonatomic) BOOL isGateWay;
/// The id of this device
@property (nonatomic, strong) NSNumber * _Nonnull id;
@property (nonatomic, copy) NSString * _Nonnull category;
/// Full name of the device
@property (nonatomic, copy) NSString * _Nonnull fullName;
@property (nonatomic, copy) NSString * _Nonnull host;
@property (nonatomic, copy) NSString * _Nonnull model;
@property (nonatomic, copy) NSString * _Nonnull isGateway;
/// name of the device ( generally a DNS name)
@property (nonatomic, copy) NSString * _Nonnull name;
@property (nonatomic, copy) NSString * _Nonnull dnsName;
/// The warranty of the device if known
@property (nonatomic, copy) NSDate * _Nonnull warranty;
@property (nonatomic, copy) NSString * _Nonnull primaryKeyStore;
@property (nonatomic, copy) NSString * _Nonnull cmsImageQuery;
@property (nonatomic, copy) NSString * _Nonnull status;
@property (nonatomic) enum DiscoveryType discoveryType;
+ (NSString * _Nullable)primaryKey SWIFT_WARN_UNUSED_RESULT;
+ (NSArray<NSString *> * _Nonnull)ignoredProperties SWIFT_WARN_UNUSED_RESULT;
- (BOOL)isEqual:(id _Nullable)object SWIFT_WARN_UNUSED_RESULT;
@property (nonatomic, readonly) NSUInteger hash;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithRealm:(RLMRealm * _Nonnull)realm schema:(RLMObjectSchema * _Nonnull)schema OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithValue:(id _Nonnull)value schema:(RLMSchema * _Nonnull)schema OBJC_DESIGNATED_INITIALIZER;
@end




/// The scan object from the scan, a list of devices
SWIFT_CLASS("_TtC6Sweepr10DeviceScan")
@interface DeviceScan : RealmSwiftObject
@property (nonatomic, copy) NSDate * _Nullable date;
@property (nonatomic, copy) NSString * _Nonnull identifier;
+ (NSString * _Nullable)primaryKey SWIFT_WARN_UNUSED_RESULT;
@property (nonatomic, readonly) NSInteger houseHoldID;
- (NSString * _Nullable)serialise SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithRealm:(RLMRealm * _Nonnull)realm schema:(RLMObjectSchema * _Nonnull)schema OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithValue:(id _Nonnull)value schema:(RLMSchema * _Nonnull)schema OBJC_DESIGNATED_INITIALIZER;
@end

typedef SWIFT_ENUM(NSInteger, DialogResponse, closed) {
  DialogResponsePrimary = 0,
  DialogResponseSecondary = 1,
  DialogResponseNotAvailable = 2,
  DialogResponseInvalid = 3,
};

/// enums for types of discovery *** NOTE the order here affects the fullName attached to the device, the enum should stay an UIInt ****
/// <ul>
///   <li>
///     local: the local device
///   </li>
///   <li>
///     router: the router
///   </li>
///   <li>
///     upNP: Upnp discovery
///   </li>
///   <li>
///     bonjour: mDNS discovery
///   </li>
///   <li>
///     netbios: NetBios discovery
///   </li>
///   <li>
///     dns: DNS discovery
///   </li>
///   <li>
///     scan: Scan discovery
///   </li>
///   <li>
///     unknown: unknown discovery
///   </li>
/// </ul>
typedef SWIFT_ENUM(NSInteger, DiscoveryType, closed) {
  DiscoveryTypeLocal = 0,
  DiscoveryTypeUpNP = 1,
  DiscoveryTypeRouter = 2,
  DiscoveryTypeBonjour = 3,
  DiscoveryTypeNetbios = 4,
  DiscoveryTypeDns = 5,
  DiscoveryTypeScan = 6,
  DiscoveryTypeUnknown = 7,
};


SWIFT_CLASS("_TtC6Sweepr3FAQ")
@interface FAQ : NSObject
- (NSString * _Nullable)serialise SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@class Location;

/// A household the user is registered to
SWIFT_CLASS("_TtC6Sweepr9Household")
@interface Household : RealmSwiftObject
@property (nonatomic, copy) NSString * _Nullable wifiSSID;
@property (nonatomic, copy) NSString * _Nullable wifiBSSID;
/// the first name of the house hold
@property (nonatomic, copy) NSString * _Nullable firstName;
/// the household Id
@property (nonatomic) NSInteger id;
/// The isp account number. 0 if none
@property (nonatomic, copy) NSString * _Nonnull ispAccountNumber;
/// the last name of the household
@property (nonatomic, copy) NSString * _Nullable lastName;
/// The location of the household
@property (nonatomic, strong) Location * _Nullable location;
/// the nickname of the household
@property (nonatomic, copy) NSString * _Nullable nickname;
/// the household tag
@property (nonatomic, copy) NSString * _Nullable tag;
@property (nonatomic, copy) NSString * _Nullable cmsImageQuery;
/// the household
@property (nonatomic) int64_t houseHoldID;
@property (nonatomic, copy) NSString * _Nonnull primaryKeyStore;
+ (NSString * _Nullable)primaryKey SWIFT_WARN_UNUSED_RESULT;
+ (NSArray<NSString *> * _Nonnull)ignoredProperties SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)initWithHouseHoldID:(int64_t)houseHoldID;
- (nonnull instancetype)initFromDict:(NSDictionary<NSString *, NSString *> * _Nonnull)dict;
- (NSString * _Nullable)serialise SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithRealm:(RLMRealm * _Nonnull)realm schema:(RLMObjectSchema * _Nonnull)schema OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithValue:(id _Nonnull)value schema:(RLMSchema * _Nonnull)schema OBJC_DESIGNATED_INITIALIZER;
@end






SWIFT_CLASS("_TtC6Sweepr13HouseholdScan")
@interface HouseholdScan : RealmSwiftObject
- (nonnull instancetype)initWithLatency:(NSNumber * _Nullable)latency speed:(NSNumber * _Nullable)speed;
- (NSString * _Nullable)serialise SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithRealm:(RLMRealm * _Nonnull)realm schema:(RLMObjectSchema * _Nonnull)schema OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithValue:(id _Nonnull)value schema:(RLMSchema * _Nonnull)schema OBJC_DESIGNATED_INITIALIZER;
@end

@class HouseholdSpeed;

SWIFT_CLASS("_TtC6Sweepr14HouseholdScans")
@interface HouseholdScans : NSObject
@property (nonatomic, copy) NSArray<HouseholdSpeed *> * _Nullable scans;
- (NSString * _Nullable)serialise SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS("_TtC6Sweepr14HouseholdSpeed")
@interface HouseholdSpeed : NSObject
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithLatency:(NSNumber * _Nullable)latency speed:(NSNumber * _Nullable)speed;
- (NSString * _Nullable)serialise SWIFT_WARN_UNUSED_RESULT;
@end

typedef SWIFT_ENUM(NSInteger, HouseholdStatus, closed) {
  HouseholdStatusIsUptoDate = 0,
  HouseholdStatusWasUpdated = 1,
  HouseholdStatusNoMatchingScanFound = 2,
  HouseholdStatusFailed = 3,
};

enum IncidentType : uint8_t;

SWIFT_CLASS("_TtC6Sweepr8Incident")
@interface Incident : NSObject
@property (nonatomic, readonly) enum IncidentType type;
- (NSString * _Nullable)serialise SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init:(NSNumber * _Nonnull)incidentId :(NSString * _Nonnull)mqttTopic OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS("_TtC6Sweepr11IncidentDTO")
@interface IncidentDTO : NSObject
@property (nonatomic, copy) NSString * _Nullable mqttTopic;
@property (nonatomic, copy) NSString * _Nullable narrative;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS("_TtC6Sweepr13IncidentQueue")
@interface IncidentQueue : NSObject
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

typedef SWIFT_ENUM(uint8_t, IncidentType, closed) {
  IncidentTypeClarification = 0,
  IncidentTypeDiagnostic = 1,
};


SWIFT_CLASS("_TtC6Sweepr23InternetServiceProvider")
@interface InternetServiceProvider : NSObject
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS("_TtC6Sweepr12IspHousehold")
@interface IspHousehold : NSObject
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@class LocationName;

SWIFT_CLASS("_TtC6Sweepr8Location")
@interface Location : RealmSwiftObject
@property (nonatomic, copy) NSString * _Nullable addressLine1;
@property (nonatomic, copy) NSString * _Nullable addressLine2;
@property (nonatomic, copy) NSString * _Nullable houseNameOrNumber;
@property (nonatomic) NSInteger latitude;
@property (nonatomic, copy) NSArray<LocationName *> * _Nullable listNamedAreasForLocation;
@property (nonatomic, copy) NSString * _Nonnull primaryKeyStore;
@property (nonatomic) NSInteger longitude;
+ (NSString * _Nullable)primaryKey SWIFT_WARN_UNUSED_RESULT;
+ (NSArray<NSString *> * _Nonnull)ignoredProperties SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithRealm:(RLMRealm * _Nonnull)realm schema:(RLMObjectSchema * _Nonnull)schema OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithValue:(id _Nonnull)value schema:(RLMSchema * _Nonnull)schema OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC6Sweepr12LocationName")
@interface LocationName : RealmSwiftObject
@property (nonatomic, copy) NSString * _Nullable name;
@property (nonatomic, copy) NSString * _Nonnull primaryKeyStore;
+ (NSString * _Nullable)primaryKey SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithRealm:(RLMRealm * _Nonnull)realm schema:(RLMObjectSchema * _Nonnull)schema OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithValue:(id _Nonnull)value schema:(RLMSchema * _Nonnull)schema OBJC_DESIGNATED_INITIALIZER;
@end

@class SweeprUser;

SWIFT_CLASS("_TtC6Sweepr8MainUser")
@interface MainUser : NSObject
@property (nonatomic, readonly, copy) NSString * _Nullable avatar;
@property (nonatomic, readonly, copy) NSString * _Nullable email;
@property (nonatomic, readonly, copy) NSString * _Nullable firstName;
@property (nonatomic, readonly, strong) InternetServiceProvider * _Nullable internetServiceProvider;
@property (nonatomic, readonly, strong) IspHousehold * _Nullable ispHousehold;
@property (nonatomic, readonly, copy) NSString * _Nullable lastName;
@property (nonatomic, readonly, copy) NSArray<NSString *> * _Nullable permissions;
@property (nonatomic, readonly, copy) NSString * _Nullable phone;
@property (nonatomic, readonly, strong) SweeprUser * _Nullable user;
- (NSString * _Nullable)serialise SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS("_TtC6Sweepr5Media")
@interface Media : NSObject <NSCoding>
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
/// Returns all the available property values in the form of [String:Any] object where the key is the approperiate json key and the value is the value of the corresponding property
- (NSDictionary<NSString *, id> * _Nonnull)toDictionary SWIFT_WARN_UNUSED_RESULT;
/// NSCoding required initializer.
/// Fills the data from the passed decoder
- (nonnull instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
/// NSCoding required method.
/// Encodes mode properties into the decoder
- (void)encodeWithCoder:(NSCoder * _Nonnull)aCoder;
@end




SWIFT_CLASS("_TtC6Sweepr13NetworkDevice")
@interface NetworkDevice : NSObject
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS("_TtC6Sweepr14NetworkDevice1")
@interface NetworkDevice1 : NSObject
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC6Sweepr14PageServiceDTO")
@interface PageServiceDTO : NSObject
- (NSString * _Nullable)serialise SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS("_TtC6Sweepr10PingResult")
@interface PingResult : NSObject
@property (nonatomic, readonly) NSInteger successPingCount;
@property (nonatomic, readonly) NSInteger errorCount;
@property (nonatomic, readonly) double maxSpeed;
@property (nonatomic, readonly) double minSpeed;
@property (nonatomic, readonly) double std;
@property (nonatomic, readonly) double average;
@property (nonatomic, readonly) BOOL pingsFailed;
@property (nonatomic) BOOL hostResolved;
@property (nonatomic, copy) NSArray<NSNumber *> * _Nonnull times;
@property (nonatomic, copy) NSArray<NSError *> * _Nonnull errors;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS("_TtC6Sweepr15ProfileResponse")
@interface ProfileResponse : NSObject
@property (nonatomic, copy) NSArray<Household *> * _Nullable households;
@property (nonatomic, copy) NSArray<NSString *> * _Nullable permissions;
@property (nonatomic, strong) SweeprUser * _Nullable user;
- (NSString * _Nullable)serialise SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC6Sweepr14RegisteredUser")
@interface RegisteredUser : NSObject
- (NSString * _Nullable)serialise SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC6Sweepr6Render")
@interface Render : NSObject
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS("_TtC6Sweepr16ResolutionAction")
@interface ResolutionAction : NSObject <NSCoding>
/// NSCoding required initializer.
/// Fills the data from the passed decoder
- (nonnull instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
/// NSCoding required method.
/// Encodes mode properties into the decoder
- (void)encodeWithCoder:(NSCoder * _Nonnull)aCoder;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS("_TtC6Sweepr17ResolutionAttempt")
@interface ResolutionAttempt : NSObject
- (NSString * _Nullable)serialise SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

typedef SWIFT_ENUM(NSInteger, ResolutionAttemptStatus, closed) {
  ResolutionAttemptStatusSuccessfulResolution = 0,
  ResolutionAttemptStatusFailedResolution = 1,
};


SWIFT_PROTOCOL("_TtP6Sweepr23ResolutionStateDelegate_")
@protocol ResolutionStateDelegate
@end

@class SweeprSubscribe;
enum UserLevel : NSInteger;
enum StatemachineRunState : NSInteger;

SWIFT_CLASS("_TtC6Sweepr22ResolutionStateMachine")
@interface ResolutionStateMachine : NSObject
/// Initalization for objecticve C and react layers
/// \param inIncidentID the incident we are evaluating
///
/// \param jsonString the JSON returned by the backend clarification response
///
/// \param level the user level - normal or advanced. Defaults to normal. The steps and text are affected by this value.
///
/// \param preferredTextType html or text, defaults to text only
///
- (nullable instancetype)initWithIncidentID:(NSInteger)inIncidentID jsonString:(NSString * _Nonnull)jsonString sweeprSubscribe:(SweeprSubscribe * _Nonnull)sweeprSubscribe withUserLevel:(enum UserLevel)level preferredTextTypes:(NSArray<NSString *> * _Nonnull)preferences OBJC_DESIGNATED_INITIALIZER;
/// The main entry point for the state machine, comtinues until an error occurs or isFinished is true
///
/// returns:
/// IsFInshed ( todo - handle more errors here)
- (void)startResolutionsWithTimeOut:(NSTimeInterval)timeOut :(void (^ _Nonnull)(enum StatemachineRunState))result;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

typedef SWIFT_ENUM(NSInteger, ResolutionState, closed) {
  ResolutionStateAllAttemptsFinished = 0,
  ResolutionStateAttemptsInProgress = 1,
  ResolutionStateNoResponse = 2,
};











@class SpeedTestResult;

SWIFT_CLASS("_TtC6Sweepr14ResolutionStep")
@interface ResolutionStep : NSObject
- (nonnull instancetype)initWithIncidentId:(NSNumber * _Nonnull)incidentId date:(NSDate * _Nonnull)date status:(NSString * _Nonnull)status step:(NSInteger)step auditSummary:(NSString * _Nonnull)auditSummary speedTestResult:(SpeedTestResult * _Nullable)speedTestResult OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithIncident:(Incident * _Nonnull)incident date:(NSDate * _Nonnull)date status:(NSString * _Nonnull)status step:(NSInteger)step auditSummary:(NSString * _Nonnull)auditSummary speedTestResult:(SpeedTestResult * _Nullable)speedTestResult OBJC_DESIGNATED_INITIALIZER;
- (NSString * _Nullable)serialise SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@class SweeprAffectedDevice;
@class Step;

SWIFT_PROTOCOL("_TtP6Sweepr20ResolutionUIDelegate_")
@protocol ResolutionUIDelegate
/// Delegate method to show some text that doesnt need a user response
/// \param content the text to show
///
/// \param delay how long the UI should display for
///
///
/// returns:
/// no return
- (void)showContent:(NSString * _Nonnull)content subContent:(NSString * _Nullable)subContent withDelay:(NSInteger)delay progresstype:(NSString * _Nonnull)progresstype buttonText:(ButtonText * _Nullable)buttonText media:(Media * _Nullable)media;
/// Show the list of devices returned from a resolution CHECK_AFFECTED_DEVICES request
/// \param deviceList the list of devices
///
/// \param buttonText the optional text for any buttons on this list
///
/// \param media any media object associated with thist
///
///
/// returns:
/// a response?
- (enum DialogResponse)showDeviceList:(NSArray<SweeprAffectedDevice *> * _Nonnull)deviceList buttonText:(ButtonText * _Nullable)buttonText media:(Media * _Nullable)media SWIFT_WARN_UNUSED_RESULT;
/// Delegate method to ask the user whether to end a prompt or not.
/// \param prompt the text to show
///
/// \param buttonText the text of the buttons
///
/// \param media the optional media
///
- (enum DialogResponse)showLogTicketPrompt:(NSString * _Nonnull)prompt subPrompt:(NSString * _Nonnull)subPrompt buttonText:(ButtonText * _Nullable)buttonText media:(Media * _Nullable)media SWIFT_WARN_UNUSED_RESULT;
/// sends an event to the delegate to signal the start of a resolution
///
/// returns:
///
- (void)startResolution:(BOOL)available attempt:(NSInteger)attempt;
/// For actions that have progress attached ( like a download)
/// \param content the text to show
///
/// \param progress the progress value between 0.0 and 0.1
///
///
/// returns:
/// no return
- (void)showDeterminateProgress:(NSString * _Nonnull)content progress:(double)progress media:(Media * _Nullable)media;
/// Prompt the user to do something, returning done or failed.
/// \param forStep Step
///
///
/// returns:
/// DialogResponse
- (enum DialogResponse)showPrompt:(NSString * _Nonnull)prompt subPrompt:(NSString * _Nullable)subPrompt type:(NSString * _Nullable)type buttonText:(ButtonText * _Nullable)buttonText media:(Media * _Nullable)media SWIFT_WARN_UNUSED_RESULT;
/// Explain to the user what failed
/// \param forStep Step
///
///
/// returns:
/// DialogResponse
- (enum DialogResponse)showFailure:(NSString * _Nonnull)text buttonText:(ButtonText * _Nullable)buttonText SWIFT_WARN_UNUSED_RESULT;
/// Sends the entire step to the user
/// \param step step
///
///
/// returns:
/// dialogResponse
- (enum DialogResponse)showStep:(Step * _Nonnull)step SWIFT_WARN_UNUSED_RESULT;
/// Delegate method to show the card content
/// \param container the card container object containing an array of cards
///
///
/// returns:
/// the response from the user, cancel or continue,
- (enum DialogResponse)showCardContent:(NSArray<CardContainer *> * _Nonnull)containers SWIFT_WARN_UNUSED_RESULT;
/// \param auditSummary the message for this step
///
/// \param order the order for this step
///
- (void)finishedStepWith:(NSString * _Nullable)auditSummary order:(NSString * _Nonnull)order status:(enum StatemachineRunState)status;
/// The end of all multiple resolutons
- (enum DialogResponse)allResolutionsFinishedWithInfotext:(NSString * _Nullable)infotext subPrompt:(NSString * _Nonnull)subPrompt type:(NSString * _Nullable)type status:(enum StatemachineRunState)status buttonText:(ButtonText * _Nullable)buttonText SWIFT_WARN_UNUSED_RESULT;
@end


SWIFT_CLASS("_TtC6Sweepr6Router")
@interface Router : RealmSwiftObject
@property (nonatomic, strong) Device * _Nullable device;
@property (nonatomic, copy) NSString * _Nonnull SSID;
@property (nonatomic, copy) NSString * _Nonnull BSID;
@property (nonatomic, copy) NSString * _Nonnull ipAddress;
@property (nonatomic, copy) NSString * _Nonnull primaryKeyStore;
@property (nonatomic) NSInteger houseHoldID;
@property (nonatomic, copy) NSString * _Nonnull pathToResource;
+ (NSString * _Nullable)primaryKey SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithRealm:(RLMRealm * _Nonnull)realm schema:(RLMObjectSchema * _Nonnull)schema OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithValue:(id _Nonnull)value schema:(RLMSchema * _Nonnull)schema OBJC_DESIGNATED_INITIALIZER;
@end

typedef SWIFT_ENUM(NSInteger, RunningAt, closed) {
  RunningAtAppResolution = 0,
  RunningAtCloudResolution = 1,
  RunningAtAgentResolution = 2,
  RunningAtAppClarification = 3,
  RunningAtCloudClarification = 4,
  RunningAtAppDiagnostic = 5,
  RunningAtCloudDiagnostic = 6,
};


SWIFT_CLASS("_TtC6Sweepr10SSDPClient")
@interface SSDPClient : NSObject
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

@class GCDAsyncUdpSocket;

@interface SSDPClient (SWIFT_EXTENSION(Sweepr)) <GCDAsyncUdpSocketDelegate>
- (void)udpSocket:(GCDAsyncUdpSocket * _Nonnull)sock didReceiveData:(NSData * _Nonnull)data fromAddress:(NSData * _Nonnull)address withFilterContext:(id _Nullable)filterContext;
@end


SWIFT_CLASS("_TtC6Sweepr19SerializationHelper")
@interface SerializationHelper : NSObject
+ (NSString * _Nonnull)serialiseFromArrayWithArray:(NSArray * _Nonnull)array SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC6Sweepr12ServerObject")
@interface ServerObject : NSObject
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// The service object.
SWIFT_CLASS("_TtC6Sweepr7Service")
@interface Service : RealmSwiftObject
/// The service category
@property (nonatomic, copy) NSString * _Nonnull category;
/// The household of this service, if any.
@property (nonatomic) NSInteger householdId;
/// The household of this service, if any.
@property (nonatomic) NSInteger householdServiceId;
@property (nonatomic) NSInteger id;
/// The image url of this service
@property (nonatomic, copy) NSString * _Nonnull image;
/// The last down time of this service
@property (nonatomic, copy) NSDate * _Nullable lastDownTime;
/// The last time this service was chekced
@property (nonatomic, copy) NSDate * _Nullable lastStatusCheck;
/// The minimum bandwidht for a reliable service
@property (nonatomic) NSInteger minimumBandwidth;
@property (nonatomic, copy) NSString * _Nonnull name;
@property (nonatomic, copy) NSString * _Nonnull serviceURI;
@property (nonatomic, copy) NSString * _Nonnull cmsImageQuery;
/// The social description of this service
@property (nonatomic, copy) NSString * _Nonnull social;
/// the status of this description
@property (nonatomic, copy) NSString * _Nonnull status;
@property (nonatomic, copy) NSString * _Nonnull primaryKeyStore;
+ (NSString * _Nullable)primaryKey SWIFT_WARN_UNUSED_RESULT;
+ (NSArray<NSString *> * _Nonnull)ignoredProperties SWIFT_WARN_UNUSED_RESULT;
@property (nonatomic, readonly, strong) NSNumber * _Nullable idValue;
@property (nonatomic, readonly, strong) NSNumber * _Nullable minimumBandwidthValue;
- (NSString * _Nullable)serialise SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithRealm:(RLMRealm * _Nonnull)realm schema:(RLMObjectSchema * _Nonnull)schema OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithValue:(id _Nonnull)value schema:(RLMSchema * _Nonnull)schema OBJC_DESIGNATED_INITIALIZER;
@end




SWIFT_CLASS("_TtC6Sweepr11ServicePage")
@interface ServicePage : NSObject
- (NSString * _Nullable)serialise SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// A class encapsulating an array of services.
SWIFT_CLASS("_TtC6Sweepr8Services")
@interface Services : NSObject
/// An array of services
@property (nonatomic, copy) NSArray<Service *> * _Nullable services;
- (NSString * _Nullable)serialise SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@class NSURLSession;
@class NSURLSessionDataTask;
@class NSURLSessionTask;

SWIFT_CLASS("_TtC6Sweepr16SingleDownloader")
@interface SingleDownloader : NSObject <NSURLSessionDataDelegate>
- (void)URLSession:(NSURLSession * _Nonnull)session dataTask:(NSURLSessionDataTask * _Nonnull)dataTask didReceiveData:(NSData * _Nonnull)data;
- (void)URLSession:(NSURLSession * _Nonnull)session task:(NSURLSessionTask * _Nonnull)task didCompleteWithError:(NSError * _Nullable)error;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS("_TtC6Sweepr11SpeedResult")
@interface SpeedResult : NSObject
@property (nonatomic) double maxSpeed;
@property (nonatomic) double minSpeed;
@property (nonatomic) double std;
@property (nonatomic) double average;
@property (nonatomic) double modifiedAvg;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC6Sweepr15SpeedTestResult")
@interface SpeedTestResult : NSObject
- (nonnull instancetype)initWithLatency:(NSInteger)latency speed:(NSInteger)speed OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

typedef SWIFT_ENUM(NSInteger, StatemachineRunState, closed) {
  StatemachineRunStateIsFinished = 0,
  StatemachineRunStateIsRunning = 1,
  StatemachineRunStateBranchFinished = 2,
  StatemachineRunStateServerTimedOut = 3,
  StatemachineRunStateWhenParsingFailed = 4,
  StatemachineRunStateFailedToParseJSON = 5,
  StatemachineRunStateMissingContextFile = 6,
  StatemachineRunStateMissingWhen = 7,
  StatemachineRunStateInvalidWhen = 8,
  StatemachineRunStateMissingSteps = 9,
  StatemachineRunStateMissingRenderInUI = 10,
  StatemachineRunStateMissingActionSteps = 11,
  StatemachineRunStateUserCancelled = 12,
  StatemachineRunStateMissingContextInfo = 13,
  StatemachineRunStateMissingDeviceName = 14,
  StatemachineRunStateMissingExpectedContextItems = 15,
  StatemachineRunStateMissingRouter = 16,
  StatemachineRunStateMissingRouterIPAddress = 17,
  StatemachineRunStateMissingRouterPathResource = 18,
  StatemachineRunStateRouterFailedWithError = 19,
};


SWIFT_CLASS("_TtC6Sweepr4Step")
@interface Step : NSObject
@property (nonatomic, readonly, copy) NSString * _Nonnull description;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

typedef SWIFT_ENUM(uint8_t, StepSubType, closed) {
  StepSubTypeStatement = 0,
  StepSubTypeQuestion = 1,
  StepSubTypeWarning = 2,
  StepSubTypeFailure = 3,
  StepSubTypeInfo = 4,
};


/// Subscribtion response is generally the clarification response.
SWIFT_CLASS("_TtC6Sweepr20SubscriptionResponse")
@interface SubscriptionResponse : NSObject
- (NSString * _Nullable)serialise SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS("_TtC6Sweepr27SubscriptionResponseWrapper")
@interface SubscriptionResponseWrapper : NSObject
@property (nonatomic) enum RunningAt listenerType;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

typedef SWIFT_ENUM(uint8_t, SuggestedClarificationType, closed) {
  SuggestedClarificationTypeNone = 0,
  SuggestedClarificationTypeAccept = 1,
  SuggestedClarificationTypeReject = 2,
};


SWIFT_CLASS("_TtC6Sweepr20SweeprAffectedDevice")
@interface SweeprAffectedDevice : NSObject <NSCoding>
/// Returns all the available property values in the form of [String:Any] object where the key is the approperiate json key and the value is the value of the corresponding property
- (NSDictionary<NSString *, id> * _Nonnull)toDictionary SWIFT_WARN_UNUSED_RESULT;
/// NSCoding required initializer.
/// Fills the data from the passed decoder
- (nonnull instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
/// NSCoding required method.
/// Encodes mode properties into the decoder
- (void)encodeWithCoder:(NSCoder * _Nonnull)aCoder;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// The class which handles the interaction with the sweepr backend
SWIFT_CLASS("_TtC6Sweepr11SweeprCloud")
@interface SweeprCloud : NSObject
@property (nonatomic, strong) Auth * _Nullable auth;
@property (nonatomic, copy) NSDictionary<NSString *, NSString *> * _Nonnull endPoints;
@property (nonatomic, copy) NSDictionary<NSString *, NSString *> * _Nonnull headers;
@property (nonatomic, copy) NSString * _Nonnull scheme;
/// initialization
/// \param endPoints the endpoints we are calling
///
/// \param headers default headers
///
- (nonnull instancetype)initWithEndPoints:(NSDictionary<NSString *, NSString *> * _Nonnull)endPoints headers:(NSDictionary<NSString *, NSString *> * _Nonnull)headers scheme:(NSString * _Nonnull)scheme OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

@class UserDTO;
@class NSError;

@interface SweeprCloud (SWIFT_EXTENSION(Sweepr))
- (void)registerUser:(UserDTO * _Nonnull)user completion:(void (^ _Nonnull)(SweeprUser * _Nullable, NSError * _Nullable))completion;
@end

@class SweeprNotes;

@interface SweeprCloud (SWIFT_EXTENSION(Sweepr))
/// Get the user’s local notifications
/// \param houseHold the household we are looking for notifications for
///
/// \param completion the result
///
- (void)getNotificationsForHouseHold:(NSInteger)houseHold completion:(void (^ _Nonnull)(SweeprNotes * _Nullable, NSError * _Nullable))completion;
@end


@interface SweeprCloud (SWIFT_EXTENSION(Sweepr))
/// Creates a new household
/// \param houseHold house hold object to create
///
/// \param userId user id
///
/// \param completion A HouseHoldCompletionManager
///
- (void)createNewHouseHoldWithHouseHold:(Household * _Nonnull)houseHold userId:(int64_t)userId completion:(void (^ _Nonnull)(Household * _Nullable, enum HouseholdStatus, NSError * _Nullable))completion;
@end


@interface SweeprCloud (SWIFT_EXTENSION(Sweepr))
/// Get the list of services by page number
/// \param page the page of the service
///
/// \param completion the resulting service paged object
///
- (void)getPagedServicesWithPage:(NSInteger)page completion:(void (^ _Nonnull)(PageServiceDTO * _Nullable, NSError * _Nullable))completion;
/// Get all known services
/// \param completion A services completion manager encapsulating
///
- (void)getServicesWithCompletion:(void (^ _Nonnull)(Services * _Nullable, NSError * _Nullable))completion;
@end


@interface SweeprCloud (SWIFT_EXTENSION(Sweepr))
- (void)reportIncidentToCareForHousehold:(NSInteger)houseHoldId incident:(NSInteger)incident completion:(void (^ _Nonnull)(IncidentQueue * _Nullable, NSError * _Nullable))completion;
/// Starts the incident resolution process by posting an incident
/// \param houseHoldID the id of the household with this incidnt
///
/// \param narrative the narrative the user has entered via keyboard or voice
///
/// \param completion the IncidentCompletionHandler result closure, and Incident or an error
///
- (void)createIncidentForHouseHold:(NSInteger)houseHoldID narrative:(NSString * _Nonnull)narrative completion:(void (^ _Nonnull)(Incident * _Nullable, NSError * _Nullable))completion;
@end


@interface SweeprCloud (SWIFT_EXTENSION(Sweepr))
- (void)getHouseHoldScansForHouseHold:(int64_t)houseHoldId completion:(void (^ _Nonnull)(HouseholdScans * _Nullable, NSError * _Nullable))completion;
/// Syncs the speed test result
/// \param householdId the household id
///
/// \param scanStatus the status, a HouseHoldSpeed object
///
/// \param completion A closure representing the result or an erro
///
- (void)syncHouseHoldScanWithHouseholdId:(int64_t)householdId scanStatus:(HouseholdSpeed * _Nonnull)scanStatus completion:(void (^ _Nonnull)(HouseholdSpeed * _Nullable, NSError * _Nullable))completion;
@end


@interface SweeprCloud (SWIFT_EXTENSION(Sweepr))
/// gets the warranty from the documents API
/// \param device the device as a named string ( i.e. iphone)
///
/// \param completion the result - an html page
///
- (void)getWarrantyForQueryDevice:(NSString * _Nonnull)device completion:(void (^ _Nonnull)(NSString * _Nullable, NSError * _Nullable))completion;
/// gets the FAQ from the documents API
/// \param device the device as a named string ( i.e. iphone)
///
/// \param completion the result
///
- (void)getFaqForQueryDevice:(NSString * _Nonnull)device completion:(void (^ _Nonnull)(FAQ * _Nullable, NSError * _Nullable))completion;
@end


@interface SweeprCloud (SWIFT_EXTENSION(Sweepr))
/// Sends a resolution file to the
/// \param houseHoldID the household id of the relevant household
///
/// \param incidentID the incident we are
///
/// \param audits an array of audit messages
///
/// \param resolutionPath an array of ordered steps
///
/// \param result the result of the resolution
///
/// \param completion the completion closure wrapping a resolution attempt
///
- (void)saveResolutionAuditForHouseHold:(NSInteger)houseHoldID incidentID:(NSInteger)incidentID audit:(NSArray<NSString *> * _Nonnull)audit resolutionPath:(NSArray<NSString *> * _Nonnull)resolutionPath result:(NSString * _Nonnull)result completion:(void (^ _Nonnull)(ResolutionAttempt * _Nullable, NSError * _Nullable))completion;
@end


@interface SweeprCloud (SWIFT_EXTENSION(Sweepr))
- (void)getPagedHouseHoldServicesWithPage:(NSInteger)page houseHoldID:(int64_t)houseHoldID completion:(void (^ _Nonnull)(PageServiceDTO * _Nullable, NSError * _Nullable))completion;
/// Get the list of household aervices
/// \param houseHoldID the id of household to query the services
///
/// \param completion A services completion manager with a list of services
///
- (void)getHouseHoldServicesWithHouseHoldID:(int64_t)houseHoldID completion:(void (^ _Nonnull)(Services * _Nullable, NSError * _Nullable))completion;
/// Add a service to the household favorited service
/// \param houseHoldId the id of the household
///
/// \param serviceID the id of the service to add
///
/// \param completion the resulting service or an error
///
- (void)addServiceFavouriteWithHouseHoldId:(int64_t)houseHoldId serviceID:(int64_t)serviceID completion:(void (^ _Nonnull)(Service * _Nullable, NSError * _Nullable))completion;
/// remove a service to the household favorited service
/// \param houseHoldId the id of the household
///
/// \param serviceID the id of the service to remove
///
/// \param completion the resulting service or an error
///
- (void)deleteServiceFavouriteWithHouseHoldId:(int64_t)houseHoldId serviceID:(int64_t)serviceID completion:(void (^ _Nonnull)(NSInteger, NSError * _Nullable))completion;
@end


@interface SweeprCloud (SWIFT_EXTENSION(Sweepr))
- (void)putUserSkillLevel:(NSInteger)skillLevel userID:(NSInteger)userID completion:(void (^ _Nonnull)(ProfileResponse * _Nullable, NSError * _Nullable))completion;
- (void)putAPNSToken:(NSString * _Nonnull)apnsToken tokenType:(NSString * _Nonnull)tokenType userID:(NSInteger)userID completion:(void (^ _Nonnull)(ProfileResponse * _Nullable, NSError * _Nullable))completion;
/// Gets the user profile
/// \param completion A UserProfileCompletion closure returning the profile or an error
///
- (void)getUserProfileWithCompletion:(void (^ _Nonnull)(ProfileResponse * _Nullable, NSError * _Nullable))completion;
@end


@interface SweeprCloud (SWIFT_EXTENSION(Sweepr))
- (void)syncDeviceScan:(NSString * _Nonnull)scanKey forHouseHold:(Household * _Nonnull)houseHold completion:(void (^ _Nonnull)(Household * _Nullable, enum HouseholdStatus, NSError * _Nullable))completion;
/// Sync devices associated with a house hold
/// \param houseHold the house hold we need to sync devices from
///
/// \param completion The HouseHoldCompletionManager encapsulating the household
///
- (void)syncDevicesInHouseHold:(Household * _Nonnull)houseHold completion:(void (^ _Nonnull)(Household * _Nullable, enum HouseholdStatus, NSError * _Nullable))completion;
/// post the latest scanned device.
/// \param houseHold the household that we are querying
///
/// \param completion the resulting house hold
///
- (void)postDevicesInHouseHold:(Household * _Nonnull)houseHold completion:(void (^ _Nonnull)(Household * _Nullable, enum HouseholdStatus, NSError * _Nullable))completion;
/// Retireves a list of known devices for this household
/// \param houseHold the household id
///
/// \param hash the hash of the devices for this household
///
/// \param completion the result
///
- (void)getDevicesForHouseHold:(Household * _Nonnull)houseHold hash:(NSString * _Nonnull)hash completion:(void (^ _Nonnull)(Household * _Nullable, enum HouseholdStatus, NSError * _Nullable))completion;
@end


@interface SweeprCloud (SWIFT_EXTENSION(Sweepr))
- (void)loginWithToken:(NSString * _Nonnull)token refreshToken:(NSString * _Nonnull)refreshToken;
- (void)logout;
- (void)loginWithUsername:(NSString * _Nonnull)username password:(NSString * _Nonnull)password completion:(void (^ _Nonnull)(Auth * _Nullable, NSError * _Nullable))completion;
/// renews a auth token using the refresh token
/// \param refreshToken reresh token
///
///
/// returns:
/// an auth object encapsulating a valid refresh token and auth token, or empty values and an error
- (void)reAuth:(NSString * _Nonnull)refreshToken completion:(void (^ _Nonnull)(Auth * _Nullable, NSError * _Nullable))completion;
@end


SWIFT_CLASS("_TtC6Sweepr19SweeprDocumentation")
@interface SweeprDocumentation : ServerObject
@end


/// SweeprDownload - a class to handle a speed test of a known dataset.
SWIFT_CLASS("_TtC6Sweepr14SweeprDownload")
@interface SweeprDownload : NSObject <NSURLSessionDelegate>
- (void)observeValueForKeyPath:(NSString * _Nullable)keyPath ofObject:(id _Nullable)object change:(NSDictionary<NSKeyValueChangeKey, id> * _Nullable)change context:(void * _Nullable)context;
/// Start a speed test by downloading from a known URL
/// React Call: yield sweeprDownload.startSpeedTest(100.0,url)
/// \param timeout the maximum time to wait
///
/// \param url the url of the data to downlaod
///
/// \param completionBlock the completion block returns a SpeedTestProgressBlock when finished
///
- (void)startSpeedTestWithTimeOut:(NSTimeInterval)timeout urlToTest:(NSURL * _Nonnull)url result:(void (^ _Nonnull)(SpeedResult * _Nullable, BOOL, double, NSError * _Nullable))completionBlock;
/// Start a speed test by downloading from a known URL
/// React Call: yield sweeprDownload.startSpeedTest(100.0,url)
/// \param timeout the maximum time to wait
///
/// \param url the url of the data to downlaod
///
/// \param completionBlock the completion block returns a SpeedTestProgressBlock when finished
///
- (void)startSpeedTestWithTimeOut:(NSTimeInterval)timeout result:(void (^ _Nonnull)(SpeedResult * _Nullable, BOOL, double, NSError * _Nullable))completionBlock;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

typedef SWIFT_ENUM(NSInteger, SweeprErrorStatus, closed) {
  SweeprErrorStatusWifiNotAvailable = 0,
  SweeprErrorStatusPingTimeout = 1,
};


SWIFT_CLASS("_TtC6Sweepr13SweeprLatency")
@interface SweeprLatency : NSObject
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
- (void)pingHostnameWithHostname:(NSString * _Nonnull)hostname numberofPings:(NSInteger)numberofPings withCallback:(void (^ _Nullable)(PingResult * _Nonnull))callback;
@end

@class SimplePing;

@interface SweeprLatency (SWIFT_EXTENSION(Sweepr)) <SimplePingDelegate>
- (void)simplePing:(SimplePing * _Null_unspecified)pinger failedToResolveHostname:(NSError * _Null_unspecified)error;
- (void)simplePing:(SimplePing * _Null_unspecified)pinger hostResolvedWithString:(NSString * _Null_unspecified)ipAddress address:(NSData * _Null_unspecified)address;
- (void)simplePing:(SimplePing * _Null_unspecified)pinger didStartWithAddress:(NSData * _Null_unspecified)address;
- (void)simplePing:(SimplePing * _Null_unspecified)pinger didFailWithError:(NSError * _Null_unspecified)error;
- (void)simplePing:(SimplePing * _Null_unspecified)pinger didSendPacket:(NSData * _Null_unspecified)packet;
- (void)simplePing:(SimplePing * _Null_unspecified)pinger didFailToSendPacket:(NSData * _Null_unspecified)packet error:(NSError * _Null_unspecified)error;
- (void)simplePing:(SimplePing * _Null_unspecified)pinger didReceivePingResponsePacket:(NSData * _Null_unspecified)packet;
- (void)simplePing:(SimplePing * _Null_unspecified)pinger didReceiveUnexpectedPacket:(NSData * _Null_unspecified)packet;
@end


/// The message in the app.
SWIFT_CLASS("_TtC6Sweepr10SweeprNote")
@interface SweeprNote : NSObject
/// The date of the note
@property (nonatomic, copy) NSString * _Nullable date;
/// the description of the note
@property (nonatomic, copy) NSString * _Nullable descriptionField;
/// The household this note is attached to
@property (nonatomic, strong) Household * _Nullable household;
/// the status of the message
@property (nonatomic, copy) NSString * _Nullable status;
/// the title of the note
@property (nonatomic, copy) NSString * _Nullable title;
/// the type of the note
@property (nonatomic, copy) NSString * _Nullable type;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


/// The class that encapsulates an array of messages
SWIFT_CLASS("_TtC6Sweepr11SweeprNotes")
@interface SweeprNotes : NSObject
/// An array of notes
@property (nonatomic, copy) NSArray<SweeprNote *> * _Nullable notes;
- (NSString * _Nullable)serialise SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end


SWIFT_CLASS("_TtC6Sweepr16SweeprResolution")
@interface SweeprResolution : NSObject <NSCoding>
@property (nonatomic, readonly) BOOL isDiagnostic;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
/// NSCoding required initializer.
/// Fills the data from the passed decoder
- (nonnull instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
/// NSCoding required method.
/// Encodes mode properties into the decoder
- (void)encodeWithCoder:(NSCoder * _Nonnull)aCoder;
@end

@protocol SweeprScannerDelegate;

/// SweeprScan scan the local network and returns updated device objects. Information is returned from upnp, netbios, MDNS, DNS and local pings
SWIFT_CLASS("_TtC6Sweepr10SweeprScan")
@interface SweeprScan : NSObject <NSNetServiceDelegate>
- (nonnull instancetype)initWithDelegate:(id <SweeprScannerDelegate> _Nullable)delegate OBJC_DESIGNATED_INITIALIZER;
- (NSString * _Nonnull)fetchBSSIDInfo SWIFT_WARN_UNUSED_RESULT;
- (NSString * _Nonnull)fetchSSIDInfo SWIFT_WARN_UNUSED_RESULT;
/// Start the demo. Returns the demo list of devices.
- (void)startDemo;
- (DeviceScan * _Nullable)startLanScanWithOption:(SweeprScanOptions)options SWIFT_WARN_UNUSED_RESULT;
/// starts a device scan
/// \param options Scan options of type SweeprDeviceOptions. The default is all
///
/// \param timeOut a timeout to end the scan
///
/// \param completion A completed result which returns a DeviceScan
///
- (void)startDeviceScanWithOptions:(SweeprDeviceOptions)options timeOut:(NSTimeInterval)timeOut completion:(void (^ _Nonnull)(DeviceScan * _Nullable))completion;
/// reset the DB and other items. EXTERNAL FACING API
- (void)reset;
- (void)stopLanScan;
/// Stop the device scan
- (void)stopDeviceScan;
- (void)stopAllDiscoveries;
- (void)observeValueForKeyPath:(NSString * _Nullable)keyPath ofObject:(id _Nullable)object change:(NSDictionary<NSKeyValueChangeKey, id> * _Nullable)change context:(void * _Nullable)context;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

typedef SWIFT_ENUM(NSInteger, SweeprScanStatus, closed) {
  SweeprScanStatusFinished = 0,
  SweeprScanStatusCancelled = 1,
};


/// Sweepr Scanner Delegate
SWIFT_PROTOCOL("_TtP6Sweepr21SweeprScannerDelegate_")
@protocol SweeprScannerDelegate <NSObject>
/// Called when a device is updated
/// \param device Device that has been updated or found.
///
- (void)sweeprFoundOrUpdatedWithDevice:(Device * _Nonnull)device;
/// This method is called when the scan has finished
/// \param status SweeprScanStatus, one of finished, or cancelled.
///
- (void)sweeprFinishedScan:(enum SweeprScanStatus)status;
/// This delegate method is called in the cases where the LAN scan has failed
/// \param status Sweepr Error Status - wifi or ping
///
- (void)sweeprFailedScanWithStatus:(enum SweeprErrorStatus)status;
/// This delegate is with a progress value.
/// \param progress the progress ( between 0.0.and 1.0) of the scan
///
/// \param lastPingedAddress the last pinged address
///
- (void)sweeprProgress:(float)progress lastPingedAddress:(NSString * _Nonnull)lastPingedAddress;
@optional
/// Optional call with list of all Devices when any is updated, sorted.
/// \param devices an array of Devices, sorted by ip
///
- (void)sweeprUpdatedDevicesWithDevices:(NSArray<Device *> * _Nonnull)devices;
@end


/// The class to subscribe to MQTT events
SWIFT_CLASS("_TtC6Sweepr15SweeprSubscribe")
@interface SweeprSubscribe : NSObject <CocoaMQTTDelegate, ResolutionUIDelegate>
- (enum DialogResponse)showStep:(Step * _Nonnull)step SWIFT_WARN_UNUSED_RESULT;
- (enum DialogResponse)showLogTicketPrompt:(NSString * _Nonnull)prompt subPrompt:(NSString * _Nonnull)subPrompt buttonText:(ButtonText * _Nullable)buttonText media:(Media * _Nullable)media SWIFT_WARN_UNUSED_RESULT;
- (enum DialogResponse)showDeviceList:(NSArray<SweeprAffectedDevice *> * _Nonnull)deviceList buttonText:(ButtonText * _Nullable)buttonText media:(Media * _Nullable)media SWIFT_WARN_UNUSED_RESULT;
- (void)startResolution:(BOOL)available attempt:(NSInteger)attempt;
- (void)showDeterminateProgress:(NSString * _Nonnull)content progress:(double)progress media:(Media * _Nullable)media;
- (void)showContent:(NSString * _Nonnull)content subContent:(NSString * _Nullable)subContent withDelay:(NSInteger)delay progresstype:(NSString * _Nonnull)progresstype buttonText:(ButtonText * _Nullable)buttonText media:(Media * _Nullable)media;
- (enum DialogResponse)showPrompt:(NSString * _Nonnull)prompt subPrompt:(NSString * _Nullable)subPrompt type:(NSString * _Nullable)type buttonText:(ButtonText * _Nullable)buttonText media:(Media * _Nullable)media SWIFT_WARN_UNUSED_RESULT;
- (enum DialogResponse)showFailure:(NSString * _Nonnull)text buttonText:(ButtonText * _Nullable)buttonText SWIFT_WARN_UNUSED_RESULT;
- (enum DialogResponse)showCardContent:(NSArray<CardContainer *> * _Nonnull)containers SWIFT_WARN_UNUSED_RESULT;
- (enum DialogResponse)allResolutionsFinishedWithInfotext:(NSString * _Nullable)infotext subPrompt:(NSString * _Nonnull)subPrompt type:(NSString * _Nullable)type status:(enum StatemachineRunState)status buttonText:(ButtonText * _Nullable)buttonText SWIFT_WARN_UNUSED_RESULT;
- (void)finishedStepWith:(NSString * _Nullable)auditSummary order:(NSString * _Nonnull)order status:(enum StatemachineRunState)status;
@property (nonatomic) BOOL testing;
/// Initialization
/// \param host the host we are listening on
///
/// \param port the port we are listening on
///
/// \param inClientID the id of the listening client
///
- (nonnull instancetype)init:(NSString * _Nonnull)host port:(NSInteger)port pathToResouce:(NSString * _Nonnull)pathToResouce uiDelegate:(id <ResolutionUIDelegate> _Nonnull)uiDelegate inClientID:(NSString * _Nonnull)clientID OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithUiDelegate:(id <ResolutionUIDelegate> _Nonnull)uiDelegate clientID:(NSString * _Nonnull)clientID;
/// connect to the MQTT connection.
- (void)connect;
/// disconnect from the MQTT connection.
- (void)disconnect;
/// set the user profile
/// \param userProfile user profile as a string
///
- (void)setUserProfile:(NSString * _Nonnull)userProfile;
/// Stop subscribing to an incident
/// \param incidentID the id of the incident to unsubscribe
///
///
/// returns:
/// an error if unsubscribe failed
- (NSError * _Nullable)unsubcribeToIncident:(NSInteger)incidentID runAtType:(enum RunningAt)runAtType SWIFT_WARN_UNUSED_RESULT;
/// start subscribing to an incident
/// \param incidentID the id of the incident to subscribe to.
///
///
/// returns:
/// an error if subscribe failed
- (void)subscribeToIncidentID:(NSInteger)incidentID completion:(void (^ _Nonnull)(SubscriptionResponse * _Nullable, NSError * _Nullable))completion;
/// start subscribing to an incident
/// \param incidentID the id of the incident to subscribe to.
///
///
/// returns:
/// an error if subscribe failed
- (void)subscribeToIncidentID:(NSInteger)incidentID receiverType:(enum RunningAt)receiverType completion:(void (^ _Nonnull)(SubscriptionResponse * _Nullable, NSError * _Nullable))completion;
/// Publish an acknowledgement after subscribing to an incident to inform the server that the client is ready to listen
/// \param incidentID the incident
///
///
/// returns:
/// an error ( NSError) on failure
- (NSError * _Nullable)publishResolutionAcknowlegementForIncident:(NSInteger)incidentID SWIFT_WARN_UNUSED_RESULT;
/// Publish an acknowledgement after subscribing to an incident to inform the server that the client is ready to listen
/// \param incidentID the incident
///
///
/// returns:
/// an error ( NSError) on failure
- (NSError * _Nullable)publishAcknowlegementForIncident:(NSInteger)incidentID SWIFT_WARN_UNUSED_RESULT;
/// Sends a resolution at the end of the
/// \param incidentID the incident
///
/// \param resolutionsAttempts the number of attempts so far
///
///
/// returns:
/// error or nil
- (NSError * _Nullable)publishResolutionFinishedForIncident:(NSInteger)incidentID resolutionsAttempts:(NSInteger)resolutionsAttempts SWIFT_WARN_UNUSED_RESULT;
/// Publishes a device response for an incident. Called after a list of devices is shown to the user for clarification
/// \param incidentID the incident that we are talking about
///
/// \param deviceID the device id
///
///
/// returns:
/// An error if the device failed.
- (NSError * _Nullable)publishDeviceSuggestionResponseForIncident:(NSInteger)incidentID deviceID:(NSInteger)deviceID runningAt:(enum RunningAt)runningAt accept:(BOOL)accept SWIFT_WARN_UNUSED_RESULT;
/// Publishes a device response for an incident. Called after a list of devices is shown to the user for clarification
/// \param incidentID the incident that we are talking about
///
/// \param deviceID the device id
///
///
/// returns:
/// An error if the device failed.
- (NSError * _Nullable)publishDeviceResponseForIncident:(NSInteger)incidentID deviceID:(NSInteger)deviceID accept:(enum SuggestedClarificationType)accept runningAt:(enum RunningAt)runningAt clarificationLayer:(NSInteger)clarificationLayer SWIFT_WARN_UNUSED_RESULT;
/// Publishes a device response for an incident. Called after a list of issues is shown to the user for clarification
/// \param incidentID the incident that we are talking about
///
/// \param issueID the issue id
///
///
/// returns:
/// An error if the device failed.
- (NSError * _Nullable)publishServiceResponseForIncident:(NSInteger)incidentID serviceID:(NSInteger)serviceID runningAt:(enum RunningAt)runningAt SWIFT_WARN_UNUSED_RESULT;
/// Publishes a device response for an incident. Called after a list of issues is shown to the user for clarification
/// \param incidentID the incident that we are talking about
///
/// \param issueID the issue id
///
///
/// returns:
/// An error if the device failed.
- (NSError * _Nullable)publishIssueResponseForIncident:(NSInteger)incidentID issueID:(NSInteger)issueID receiverType:(enum RunningAt)runningAt SWIFT_WARN_UNUSED_RESULT;
/// Publish an acknowledgement after subscribing to an incident to inform the server that the client is ready to listen
/// \param incidentID the incident
///
///
/// returns:
/// an error ( NSError) on failure
- (NSError * _Nullable)publishDiagnosticAcknowlegementForIncident:(NSInteger)incidentID SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end




@interface SweeprSubscribe (SWIFT_EXTENSION(Sweepr))
- (void)mqtt:(CocoaMQTT * _Nonnull)mqtt didReceive:(SecTrustRef _Nonnull)trust completionHandler:(void (^ _Nonnull)(BOOL))completionHandler;
- (void)mqtt:(CocoaMQTT * _Nonnull)mqtt didConnectAck:(enum CocoaMQTTConnAck)ack;
- (void)mqtt:(CocoaMQTT * _Nonnull)mqtt didStateChangeTo:(enum CocoaMQTTConnState)state;
- (void)mqtt:(CocoaMQTT * _Nonnull)mqtt didPublishMessage:(CocoaMQTTMessage * _Nonnull)message id:(uint16_t)id;
- (void)mqtt:(CocoaMQTT * _Nonnull)mqtt didPublishAck:(uint16_t)id;
- (void)mqtt:(CocoaMQTT * _Nonnull)mqtt didReceiveMessage:(CocoaMQTTMessage * _Nonnull)message id:(uint16_t)id;
- (void)mqtt:(CocoaMQTT * _Nonnull)mqtt didSubscribeTopic:(NSString * _Nonnull)topic;
- (void)mqtt:(CocoaMQTT * _Nonnull)mqtt didUnsubscribeTopic:(NSString * _Nonnull)topic;
- (void)mqttDidPing:(CocoaMQTT * _Nonnull)mqtt;
- (void)mqttDidReceivePong:(CocoaMQTT * _Nonnull)mqtt;
- (void)mqttDidDisconnect:(CocoaMQTT * _Nonnull)mqtt withError:(NSError * _Nullable)err;
@end


SWIFT_CLASS("_TtC6Sweepr10SweeprUser")
@interface SweeprUser : NSObject
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
- (NSString * _Nullable)serialise SWIFT_WARN_UNUSED_RESULT;
@end


SWIFT_CLASS("_TtC6Sweepr14SweeprWarranty")
@interface SweeprWarranty : SweeprDocumentation
@end


SWIFT_CLASS("_TtC6Sweepr12SyncedDevice")
@interface SyncedDevice : NSObject
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end




SWIFT_CLASS("_TtC6Sweepr12TokenWrapper")
@interface TokenWrapper : RealmSwiftObject
@property (nonatomic, copy) NSString * _Nullable token;
@property (nonatomic, copy) NSString * _Nullable refreshToken;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithRealm:(RLMRealm * _Nonnull)realm schema:(RLMObjectSchema * _Nonnull)schema OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithValue:(id _Nonnull)value schema:(RLMSchema * _Nonnull)schema OBJC_DESIGNATED_INITIALIZER;
@end


SWIFT_CLASS("_TtC6Sweepr7UserDTO")
@interface UserDTO : RealmSwiftObject
@property (nonatomic, copy) NSString * _Nullable avatar;
@property (nonatomic, copy) NSString * _Nullable email;
@property (nonatomic, copy) NSString * _Nullable firstName;
@property (nonatomic, copy) NSString * _Nullable hashedPassword;
@property (nonatomic, strong) InternetServiceProvider * _Nullable internetServiceProvider;
@property (nonatomic, copy) NSString * _Nullable lastName;
@property (nonatomic, copy) NSString * _Nullable phone;
@property (nonatomic, copy) NSString * _Nullable username;
@property (nonatomic, copy) NSString * _Nullable token;
@property (nonatomic, copy) NSString * _Nullable tokenType;
@property (nonatomic, strong) NSNumber * _Nullable skillLevel;
+ (NSString * _Nullable)primaryKey SWIFT_WARN_UNUSED_RESULT;
+ (NSArray<NSString *> * _Nonnull)ignoredProperties SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)initWithToken:(NSString * _Nullable)token tokenType:(NSString * _Nullable)tokenType;
- (nonnull instancetype)initWithUsername:(NSString * _Nullable)username hashedPassword:(NSString * _Nullable)hashedPassword;
- (nonnull instancetype)initWithAvatar:(NSString * _Nullable)avatar email:(NSString * _Nullable)email firstName:(NSString * _Nullable)firstName hashedPassword:(NSString * _Nullable)hashedPassword internetServiceProvider:(InternetServiceProvider * _Nullable)internetServiceProvider lastName:(NSString * _Nullable)lastName phone:(NSString * _Nullable)phone username:(NSString * _Nullable)username;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithRealm:(RLMRealm * _Nonnull)realm schema:(RLMObjectSchema * _Nonnull)schema OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithValue:(id _Nonnull)value schema:(RLMSchema * _Nonnull)schema OBJC_DESIGNATED_INITIALIZER;
@end

typedef SWIFT_ENUM(NSInteger, UserLevel, closed) {
  UserLevelNormal = 0,
  UserLevelAdvanced = 1,
};

#if __has_attribute(external_source_symbol)
# pragma clang attribute pop
#endif
#pragma clang diagnostic pop
